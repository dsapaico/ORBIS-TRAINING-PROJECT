'use strict';

var Asset = require('./domain/asset');
var AssetService = require('./app/asset-service');
var AssetFacade = require('./asset-facade');
var vinylServe = require('vinyl-serve');

var liftoff = require('./util/liftoff');

var service = new AssetService();

// -- DSL vocabularies -- //
// These are used in bulbofiles.

/**
 * Creates and registers an asset by the given paths and returns AssetFacade interface for further modification of asset building.
 * See the document of AssetFacade about what can be modified about the assets.
 * @param {Array<string|string[]>} paths The paths of the asset
 * @return {Function}
 */
exports.asset = function () {
  for (var _len = arguments.length, paths = Array(_len), _key = 0; _key < _len; _key++) {
    paths[_key] = arguments[_key];
  }

  var asset = new (Function.prototype.bind.apply(Asset, [null].concat(paths)))();

  service.addAsset(asset);

  return new AssetFacade(asset);
};

/**
 * Sets the dest.
 * @param {String} dest The destination
 */
exports.dest = function (dest) {
  return service.setDest(dest);
};

/**
 * Sets the default of the asset's base path.
 * @param {string} base The default base path
 */
exports.base = function (base) {
  return service.setAssetBasePath(base);
};

/**
 * Sets the port number.
 * @param {Number} port The port number
 */
exports.port = function (port) {
  return service.setPort(port);
};

/**
 * Sets the debug page title.
 * @param {string} debugPageTitle
 */
exports.debugPageTitle = function (debugPageTitle) {
  return service.setDebugPageTitle(debugPageTitle);
};

/**
 * Sets the debug page path.
 * @param {string} debugPagePath
 */
exports.debugPagePath = function (debugPagePath) {
  return service.setDebugPagePath(debugPagePath);
};

// -- API for CLI -- //
// These are used in CLIs.

/**
 * Serves the assets at localhost.
 * @return {Promise}
 */
exports.serve = function () {
  return service.serve();
};

/**
 * Builds the assets to the destination.
 * @return {Promise}
 */
exports.build = function () {
  return service.build();
};

/**
 * Watches and builds the assets.
 */
exports.watchAndBuild = function () {
  return service.watchAndBuild();
};

/**
 * Unwatches the assets.
 */
exports.unwatch = function () {
  return service.unwatch();
};

/**
 * Returns true iff the assets are empty.
 * @return {Boolean}
 */
exports.isEmpty = function () {
  return service.isEmpty();
};

/**
 * Sets the logger title.
 * @param {string} name The logger title
 */
exports.loggerTitle = function (title) {
  return service.setLogger(require('./util/logger')(title));
};

// -- Private API -- //
// These are used in tests.

/**
 * Sets the logger. Private API.
 * @param {Logger} logger The logger
 */
exports.setLogger = function (logger) {
  return service.setLogger(logger);
};

/**
 * Clears all the assets. Private API.
 * @private
 */
exports.clear = function () {
  return service.clear();
};

/**
 * Adds the connect middleware.
 * @param {Function} middleware
 */
exports.addMiddleware = function (middleware) {
  vinylServe.addMiddleware(middleware);
};

exports.cli = { liftoff: liftoff };