'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var vfs = require('vinyl-fs');
var drain = require('../util/drain');
var AssetWatcher = require('./asset-watcher');
var chalk = require('chalk');

/**
 * The service class which builds the assets to the file system.
 */

var AssetBuilder = function (_AssetWatcher) {
  _inherits(AssetBuilder, _AssetWatcher);

  /**
   * @constructor
   * @param {AssetCollection} assets The assets
   * @param {String} dest The destination
   * @param {Logger} logger The logger
   */
  function AssetBuilder(assets, dest, logger) {
    _classCallCheck(this, AssetBuilder);

    var _this = _possibleConstructorReturn(this, (AssetBuilder.__proto__ || Object.getPrototypeOf(AssetBuilder)).call(this, assets));

    _this.logger = logger;
    _this.dest = dest;
    return _this;
  }

  /**
   * Builds the assets.
   * @return {Promise}
   */


  _createClass(AssetBuilder, [{
    key: 'build',
    value: function build(options) {
      var _this2 = this;

      options = options || {};

      this.logger.log(chalk.green('building'));

      var stream = this.assets.getMergedStream().pipe(vfs.dest(this.dest)).pipe(drain.obj());

      this.assets.forEach(function (asset) {
        return asset.reflow({ base: options.base });
      });

      return new Promise(function (resolve, reject) {
        return stream.on('end', resolve).on('error', reject);
      }).then(function () {
        return _this2.logger.log(chalk.green('done'));
      });
    }

    /**
     * Watches and builds.
     * @param {Object} options The options
     */

  }, {
    key: 'watchAndBuild',
    value: function watchAndBuild(options) {
      this.logger.log(chalk.green('watching and building'));

      this.watchAndPipe(vfs.dest(this.dest), options);
    }
  }]);

  return AssetBuilder;
}(AssetWatcher);

module.exports = AssetBuilder;