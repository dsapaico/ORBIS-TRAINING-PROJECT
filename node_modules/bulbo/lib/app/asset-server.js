'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var chalk = require('chalk');
var vinylServe = require('vinyl-serve');
var AssetWatcher = require('./asset-watcher');

var AssetServer = function (_AssetWatcher) {
  _inherits(AssetServer, _AssetWatcher);

  /**
   * @param {AssetCollection} assets The assets
   * @param {Number} port The port number
   * @param {Logger} logger The logger
   * @param {string} [debugPageTitle] The page title of the debug page. Html tags are available. Optional.
   * @param {string} [debugPagePath] The path of the debug page. Default is '__bulbo__'.
   */
  function AssetServer(assets, port, logger, debugPageTitle, debugPagePath) {
    _classCallCheck(this, AssetServer);

    var _this = _possibleConstructorReturn(this, (AssetServer.__proto__ || Object.getPrototypeOf(AssetServer)).call(this, assets));

    _this.port = port;
    _this.logger = logger;

    vinylServe.setDebugPageTitle(debugPageTitle);
    vinylServe.setDebugPagePath('/' + debugPagePath);
    vinylServe.setHandlerOfStarting(function (url, debugUrl) {
      _this.logger.log('Server started at:', chalk.cyan(url));
      _this.logger.log('See debug info at:', chalk.cyan(debugUrl));
    });

    vinylServe.setHandlerOfPortError(function (port) {
      _this.logger.log(chalk.red('Error: The port number ' + port + ' is already in use'));

      process.exit(1);
    });
    return _this;
  }

  /**
   * Serves, watching paths for assets.
   * @param {Object} options The options
   * @return {Promise}
   */


  _createClass(AssetServer, [{
    key: 'serve',
    value: function serve(options) {
      this.logger.log(chalk.green('serving'));

      this.watchAndPipe(vinylServe(this.port), options);

      return vinylServe.getInstance(this.port).startPromise;
    }
  }]);

  return AssetServer;
}(AssetWatcher);

module.exports = AssetServer;