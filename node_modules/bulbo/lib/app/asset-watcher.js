'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('events'),
    EventEmitter = _require.EventEmitter;

var AssetWatcher = function (_EventEmitter) {
  _inherits(AssetWatcher, _EventEmitter);

  /**
   * @param {AssetCollection} assets The assets
   */
  function AssetWatcher(assets) {
    _classCallCheck(this, AssetWatcher);

    var _this = _possibleConstructorReturn(this, (AssetWatcher.__proto__ || Object.getPrototypeOf(AssetWatcher)).call(this));

    _this.assets = assets;
    return _this;
  }

  /**
   * Watches all the assets and pipes everything into the given writable
   * @param {Writable} writable The writable
   * @param {Object} options The options
   * @param {string} options.base The default base path of the asset
   */


  _createClass(AssetWatcher, [{
    key: 'watchAndPipe',
    value: function watchAndPipe(writable, options) {
      var _this2 = this;

      options = options || {};

      this.assets.forEach(function (asset) {
        asset.getStream().pipe(writable);

        asset.watch(function () {
          _this2.emit('changed', asset);

          asset.reflow({ end: false, base: options.base }, function () {
            return _this2.emit('ready', asset);
          });
        });

        _this2.emit('reading', asset);

        asset.reflow({ end: false, base: options.base }, function () {
          return _this2.emit('ready', asset);
        });
      });
    }

    /**
     * Unwatches the assets
     */

  }, {
    key: 'unwatch',
    value: function unwatch() {
      this.assets.forEach(function (asset) {
        return asset.unwatch();
      });
    }
  }]);

  return AssetWatcher;
}(EventEmitter);

module.exports = AssetWatcher;