'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @param {number} n The non negative number less than 100.
 */
function zeropad(n) {
  return ('0' + n).match(/..$/)[0];
}

/**
 * Returns the current timestamp with the format HH:MM:ss
 * @return {string}
 */
function timestamp() {
  var date = new Date();

  return [zeropad(date.getHours()), zeropad(date.getMinutes()), zeropad(date.getSeconds())].join(':');
}

/**
 * The logger class.
 */

var Logger = function () {
  /**
   * @param {string} name The logger name
   */
  function Logger(name) {
    _classCallCheck(this, Logger);

    this.name = name;
  }

  /**
   * Logs the given messages with timestamp
   * @param {Array} args The messages
   */


  _createClass(Logger, [{
    key: 'log',
    value: function log() {
      var _console;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_console = console).log.apply(_console, [this.name + ' [' + timestamp() + ']'].concat(args));
    }
  }]);

  return Logger;
}();

/**
 * @param {string} name The logger name
 */


module.exports = function (name) {
  return new Logger(name);
};