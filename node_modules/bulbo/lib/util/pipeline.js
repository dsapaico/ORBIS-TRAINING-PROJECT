'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Splicer = require('stream-splicer');

/**
 * This represents linear pipeline of the series of the duplex streams.
 */

var Pipeline = function (_Splicer) {
  _inherits(Pipeline, _Splicer);

  /**
   * @param {Duplex[]} streams The duplex streams
   * @param {object} opts The options
   */
  function Pipeline(streams) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var objectMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, Pipeline);

    opts.objectMode = objectMode;

    var _this = _possibleConstructorReturn(this, (Pipeline.__proto__ || Object.getPrototypeOf(Pipeline)).call(this, streams, opts));

    _this.version = 0;

    _this.on('data', function (data) {
      _this.version = _this.version + 1;

      var version = _this.version;

      if (_this.totalBufferLength() === 0) {
        setTimeout(function () {
          if (version === _this.version) {
            _this.emit('buffer-empty');
          }
        }, 200);
      }
    });
    return _this;
  }

  /**
   * Returns the length of the readable buffer.
   * @param {Readable} pipe The readable stream
   * @return {number}
   */


  _createClass(Pipeline, [{
    key: 'totalBufferLength',


    /**
     * Returns the total buffer length in the pipeline.
     * @return {number}
     */
    value: function totalBufferLength() {
      return this._streams.map(function (pipe) {
        return Pipeline.getBufferLength(pipe);
      }).reduce(function (x, y) {
        return x + y;
      });
    }

    /**
     * Factory method for Pipeline which creates it in object mode.
     * @param {Duplex[]} streams The duplex streams
     * @return {Pipeline}
     */

  }], [{
    key: 'getBufferLength',
    value: function getBufferLength(pipe) {
      var length = 0;

      if (pipe._readableState != null && typeof pipe._readableState.length === 'number') {
        // Adds readable buffer length
        length += pipe._readableState.length;
      }

      if (pipe._writableState != null && typeof pipe._readableState.getBuffer === 'function') {
        // Adds writable buffer length
        length += pipe._writableState.getBuffer().length;
      }

      return length;
    }
  }, {
    key: 'obj',
    value: function obj(streams, opts) {
      return new Pipeline(streams, opts, true);
    }
  }]);

  return Pipeline;
}(Splicer);

module.exports = Pipeline;