'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var chalk = require('chalk');
var minimisted = require('minimisted');
var minirocket = require('minirocket');

var usage = require('./usage');

/**
 * @param {boolean} argv.v The version flag
 * @param {boolean} argv.version The version flag
 * @param {boolean} argv.h The help flag
 * @param {boolean} argv.help The help flag
 * @param {string} argv._.0 The action name
 */
minimisted(function (argv) {
  var v = argv.v,
      version = argv.version,
      h = argv.h,
      help = argv.help,
      _argv$_ = _slicedToArray(argv._, 1),
      action = _argv$_[0];

  minirocket(_defineProperty({
    version: v || version,
    help: h || help,
    serve: !action
  }, action, true), function (action) {
    action(argv);
  }).on('no-action', function (name) {
    console.log(chalk.red('Error: No such action: ' + name));
    usage();
    process.exit(1);
  });
});