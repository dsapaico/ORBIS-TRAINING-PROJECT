'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var mergeStream = require('../util/mergeStream');

var _require = require('events'),
    EventEmitter = _require.EventEmitter;

/**
 * The collection class of assets.
 */


var AssetCollection = function (_EventEmitter) {
  _inherits(AssetCollection, _EventEmitter);

  /**
   * @constructor
   */
  function AssetCollection() {
    _classCallCheck(this, AssetCollection);

    var _this = _possibleConstructorReturn(this, (AssetCollection.__proto__ || Object.getPrototypeOf(AssetCollection)).call(this));

    _this.assets = [];
    return _this;
  }

  /**
   * Adds the asset.
   * @param {Asset} asset The asset
   */


  _createClass(AssetCollection, [{
    key: 'add',
    value: function add(asset) {
      var _this2 = this;

      asset.on('error', function (err) {
        return _this2.emit('error', err, asset);
      });

      this.assets.push(asset);
    }

    /**
     * Gets the merged stream of assets.
     * @return {Stream}
     */

  }, {
    key: 'getMergedStream',
    value: function getMergedStream() {
      return mergeStream(this.assets.map(function (asset) {
        return asset.getStream();
      }));
    }

    /**
     * Invokes the callback for each item with the given context.
     * @param {Function} cb The callback
     * @param {Object} ctx The this context
     */

  }, {
    key: 'forEach',
    value: function forEach(cb, ctx) {
      this.assets.forEach(cb, ctx);
    }

    /**
     * Returns if the assets are empty.
     * @return {Boolean}
     */

  }, {
    key: 'isEmpty',
    value: function isEmpty() {
      return this.assets.length === 0;
    }

    /**
     * Empties the assets list.
     */

  }, {
    key: 'empty',
    value: function empty() {
      this.assets.splice(0);
    }
  }]);

  return AssetCollection;
}(EventEmitter);

module.exports = AssetCollection;