'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var vfs = require('vinyl-fs');
var pipeline = require('../util/pipeline');
var _watch = require('../util/watch');

var _require = require('events'),
    EventEmitter = _require.EventEmitter;

var plumber = require('gulp-plumber');

/**
 * The model of asset
 */

var Asset = function (_EventEmitter) {
  _inherits(Asset, _EventEmitter);

  /**
   * @constructor
   * @param {Array<string|string[]>} paths The paths to build
   */
  function Asset() {
    _classCallCheck(this, Asset);

    var _this = _possibleConstructorReturn(this, (Asset.__proto__ || Object.getPrototypeOf(Asset)).call(this));

    _this.paths = [];
    _this.addAssetPaths.apply(_this, arguments);
    _this.opts = {};
    _this.watchPaths = [];
    _this.watchOpts = {};

    _this.pipeline = pipeline.obj().on('error', function (err) {
      return _this.emit('error', err);
    });

    _this.addPipe(plumber(function (err) {
      return _this.emit('error', err);
    }));
    return _this;
  }

  /**
   * Adds the asset paths.
   * @param {Array<string|string[]>} paths The paths to build
   */


  _createClass(Asset, [{
    key: 'addAssetPaths',
    value: function addAssetPaths() {
      var _paths;

      this.paths = (_paths = this.paths).concat.apply(_paths, arguments);
    }

    /**
     * Sets the asset options.
     * @param {object} opts The asset options to pass to vinyl-fs when creating vinyl stream
     */

  }, {
    key: 'setAssetOpts',
    value: function setAssetOpts(opts) {
      Object.assign(this.opts, opts);
    }

    /**
     * Adds the watch paths.
     * @param {string|string[]} paths The paths
     */

  }, {
    key: 'addWatchPaths',
    value: function addWatchPaths() {
      for (var _len = arguments.length, paths = Array(_len), _key = 0; _key < _len; _key++) {
        paths[_key] = arguments[_key];
      }

      this.watchPaths = this.watchPaths.concat(paths);
    }

    /**
     * @param {Transform}
     */

  }, {
    key: 'addPipe',
    value: function addPipe(pipe) {
      this.pipeline.push(pipe);
    }

    /**
     * Sets the watch opts.
     * @param {object} opts The watch opts
     */

  }, {
    key: 'setWatchOpts',
    value: function setWatchOpts(opts) {
      Object.assign(this.watchOpts, opts);
    }

    /**
     * Pours the source files into the transform stream.
     * @param {object} options The pipe options
     * @param {Function} cb The callback
     */

  }, {
    key: 'reflow',
    value: function reflow(options, cb) {
      options = options || {};

      this.getSourceStream({ base: options.base }).pipe(this.pipeline, { end: options.end });

      if (cb) {
        this.pipeline.once('buffer-empty', cb);
      }
    }

    /**
     * Gets the source stream.
     * @private
     * @param {Object} options The options
     * @return {Readable}
     */

  }, {
    key: 'getSourceStream',
    value: function getSourceStream(options) {
      return vfs.src(this.paths, Object.assign(options, this.opts));
    }

    /**
     * Gets the readable end of the transform stream.
     * @return {Readable}
     */

  }, {
    key: 'getStream',
    value: function getStream() {
      return this.pipeline;
    }

    /**
     * Gets the watch path(s).
     * @private
     * @return {String|String[]}
     */

  }, {
    key: 'getWatchPaths',
    value: function getWatchPaths() {
      return this.watchPaths.length > 0 ? this.watchPaths : this.paths;
    }

    /**
     * Starts watching the given watch paths.
     * @param {Function} cb The callback
     */

  }, {
    key: 'watch',
    value: function watch(cb) {
      // fswatcher is an instance of FWWatcher class of chokidar module. See chokidar's document for the details.
      this.fswatcher = _watch(this.getWatchPaths(), this.watchOpts, cb);
    }

    /**
     * Unwatches the assets.
     */

  }, {
    key: 'unwatch',
    value: function unwatch() {
      this.fswatcher.unwatch(this.getWatchPaths());
    }

    /**
     * Returns a string expression
     */

  }, {
    key: 'toString',
    value: function toString() {
      return this.paths.toString();
    }
  }]);

  return Asset;
}(EventEmitter);

module.exports = Asset;