"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The interface which exposes as "asset" in bulbofile
 */
var AssetFacade = function () {
  /**
   * @param {Asset} asset The asset to modify
   */
  function AssetFacade(asset) {
    _classCallCheck(this, AssetFacade);

    this.assetModel = asset;
  }

  /**
   * Gets the asset model.
   * @return {Asset}
   */


  _createClass(AssetFacade, [{
    key: "getAssetModel",
    value: function getAssetModel() {
      return this.assetModel;
    }

    /**
     * Adds the asset paths.
     * @param {Array<string|string[]>} paths The paths
     */

  }, {
    key: "asset",
    value: function asset() {
      var _getAssetModel;

      (_getAssetModel = this.getAssetModel()).addAssetPaths.apply(_getAssetModel, arguments);

      return this;
    }

    /**
     * Sets the asset options.
     * @param {object} opts The options to pass to the vinyl-fs
     */

  }, {
    key: "assetOptions",
    value: function assetOptions(opts) {
      this.getAssetModel().setAssetOpts(opts);

      return this;
    }

    /**
     * Sets the watch paths and opts.
     * @param {Array<string|string[]>} watchPaths The paths to watch
     */

  }, {
    key: "watch",
    value: function watch() {
      var _getAssetModel2;

      (_getAssetModel2 = this.getAssetModel()).addWatchPaths.apply(_getAssetModel2, arguments);

      return this;
    }

    /**
     * Sets the watch options.
     * @param {object} options The watch options
     */

  }, {
    key: "watchOptions",
    value: function watchOptions(options) {
      this.getAssetModel().setWatchOpts(options);

      return this;
    }

    /**
     * Sets the base path.
     * @param {string} base The base path
     */

  }, {
    key: "base",
    value: function base(_base) {
      this.getAssetModel().setAssetOpts({ base: _base });

      return this;
    }

    /**
     * Adds the trasform of transform stream.
     * @param {Transform} transform The transform to pass to the vinyl stream
     */

  }, {
    key: "pipe",
    value: function pipe(transform) {
      if (!transform) {
        throw new Error("null transform is given for asset: " + this.getAssetModel().toString());
      }

      this.getAssetModel().addPipe(transform);

      return this;
    }
  }]);

  return AssetFacade;
}();

module.exports = AssetFacade;